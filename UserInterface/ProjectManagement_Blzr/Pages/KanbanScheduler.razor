@page "/kanbanscheduler"
@using System.Text;
@inject NavigationManager navigationManager
@inject HttpClient httpClient

@if (appointmentDatas.Count > 0)
{
    <div class="row">
        <div class="col-lg-2">
            <h4>Not Scheduled Cards</h4>
            <SfTreeView @ref="TreeViewRef" TValue="KanbanCardDto" AllowDragAndDrop AllowTextWrap>
             <TreeViewFieldsSettings DataSource="@unscheduledCards" Id="Id" Text="Summary" IconCss="e-icons e-plus"></TreeViewFieldsSettings>
             <TreeViewEvents TValue="KanbanCardDto" OnNodeDragStop="DragStop"></TreeViewEvents>
         </SfTreeView>
     </div>
     <div class="col-lg-10 e-droppable">
         <SfSchedule @ref="ScheduleRef" TValue="AppointmentData" Height="calc(100vh - 4.75rem)" AllowDragAndDrop="false">
             <ScheduleEvents TValue="AppointmentData" EventRendered="OnEventRendered" OnPopupOpen="@OnPopupOpen"></ScheduleEvents>
             <ScheduleEventSettings DataSource="@appointmentDatas" IgnoreWhitespace="false" AllowDeleting="false" EnableTooltip>
                 <TooltipTemplate>
                     @{
                            var eventData = (context as AppointmentData);
                            <div class="tooltip-wrap">
                                <div class="content-area">
                                    <div class="name">@eventData!.Subject</div>
                                    <div class="time">Created At : @eventData.CreateTime.ToString("dd.MM.yyyy")</div>
                                    <div class="time">Status      : @eventData.Status</div>
                                </div>
                            </div>
                        }
                    </TooltipTemplate>
                </ScheduleEventSettings>
                <ScheduleViews>
                    <ScheduleView Option="View.Month" MaxEventsPerRow="4" ShowWeekend="false"></ScheduleView>
                    <ScheduleView Option="View.MonthAgenda" ShowWeekend="false"></ScheduleView>
                    <ScheduleView Option="View.Year"></ScheduleView>
                    <ScheduleView Option="View.Agenda"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>


        </div>
    </div>
}

@* Alert Message *@
<SfToast @ref="ToastObj" Title="Alert" Content="@MessageText" CssClass="@MessageType" Icon="e-warning toast-icons">
    <ToastPosition X="Left" Y="Bottom"></ToastPosition>
</SfToast>

<style>
    .e-treeview .e-text-content {
        padding: 0 !important;
        margin: 0 !important;
    }

    .e-treeview .e-list-text {
        padding: 0 !important;
    }

    .e-schedule .e-text-center {
        text-align: left;
    }

    .e-schedule-event-tooltip .tooltip-wrap {
        display: flex;
        align-items: center;
    }

        .e-schedule-event-tooltip .tooltip-wrap .image {
            background-position: center center;
            background-repeat: no-repeat;
            background-size: cover;
            width: 50px;
            height: 50px;
        }

    e-schedule-event-tooltip .tooltip-wrap .content-area {
        padding-left: 6px;
        font-size: 12px;
    }

    .e-schedule-event-tooltip .tooltip-wrap .name {
        font-size: 14px;
    }

</style>

@code {

    SfToast ToastObj = new SfToast();
    private string MessageText = string.Empty;
    private string MessageType = string.Empty;

    SfSchedule<AppointmentData> ScheduleRef = new();
    SfTreeView<KanbanCardDto> TreeViewRef = new();
    private List<KanbanCardDto> kanbanCards = new();
    private List<AppointmentData> appointmentDatas = new();
    List<KanbanCardDto> unscheduledCards = new();

    private HubConnection? hubConnection;



    protected override async Task OnInitializedAsync()
    {
        kanbanCards.Clear();
        unscheduledCards.Clear();
        var result = await httpClient.GetAsync("api/Kanban");
        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(response))
            {
                var _kanbans = JsonConvert.DeserializeObject<List<KanbanCardDto>>(response)!;
                if (_kanbans.Count > 0)
                {
                    foreach (var kanban in _kanbans)
                    {
                        kanbanCards.Add(new KanbanCardDto
                            {
                                Id = kanban.Id,
                                Title = kanban.Title,
                                Summary = kanban.Summary,
                                CreatedDate = kanban.CreatedDate,
                                EstimatedEndDate = kanban.EstimatedEndDate,
                                ProjectId = kanban.ProjectId,
                                ProjectTitle = kanban.ProjectTitle,
                                Assignee = kanban.Assignee,
                                CardTags = kanban.CardTags,
                                Color = kanban.Color,
                                Priority = kanban.Priority,
                                Status = kanban.Status
                            });
                    }
                }
            }
        }

        unscheduledCards = kanbanCards.Where(x => x.EstimatedEndDate.ToString("dd.MM.yyyy").Equals("01.01.0001") && !x.Status!.Equals("Close")).ToList();
        foreach (var appointment in kanbanCards.Where(x => !x.EstimatedEndDate.ToString("dd.MM.yyyy").Equals("01.01.0001") && !x.Status!.Equals("Close")).ToList())
        {
            string color = string.Empty;
            if (appointment.Status == "InProgress")
            {
                color = "#557A46";
            }
            if (appointment.Status == "Testing")
            {
                color = "#C23373";
            }
            if (appointment.EstimatedEndDate < Convert.ToDateTime(DateTime.Now.ToShortDateString()))
            {
                color = "#C70039";
            }
            appointmentDatas.Add(new AppointmentData
                {
                    Id = appointment.Id,
                    Subject = appointment.Summary!,
                    IsAllDay = true,
                    CreateTime = appointment.CreatedDate,
                    StartTime = appointment.EstimatedEndDate,
                    EndTime = appointment.EstimatedEndDate,
                    CategoryColor = color,
                    Status = appointment.Status!
                });
        }

        hubConnection = new HubConnectionBuilder()
                            .WithUrl(navigationManager.ToAbsoluteUri("/kanbanhub"))
                            .WithAutomaticReconnect()
                            .Build();

        await hubConnection.StartAsync();
    }

    async Task DragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        Syncfusion.Blazor.Schedule.CellClickEventArgs cellData = await ScheduleRef.GetTargetCellAsync((int)args.Left, (int)args.Top);
        if (cellData != null)
        {
            if (hubConnection is not null)
            {
                KanbanCardDto updatedKanbanCard = unscheduledCards.Where(x => x.Id.Equals(Convert.ToInt32(args.DraggedNodeData.Id))).First();
                await hubConnection.SendAsync(methodName: "ChangeStatus", updatedKanbanCard);
            }
            // if (cellData.StartTime < Convert.ToDateTime(DateTime.Now.ToShortDateString()))
            // {
            //     await ShowAlert("Estimated End Date must be at least today", "Alert");
            // }
            // else
            // {
            //     var resourceDetails = ScheduleRef.GetResourceByIndex(cellData.GroupIndex);
            //     AppointmentData eventData = new AppointmentData
            //         {
            //             Id = Convert.ToInt32(args.DraggedNodeData.Id),
            //             Subject = args.DraggedNodeData.Text,
            //             IsAllDay = true,
            //             StartTime = cellData.StartTime,
            //             EndTime = cellData.EndTime,
            //         };
            //     // update kanban card EstimatedEndDate
            //     KanbanCardDto updatedKanbanCard = unscheduledCards.Where(x => x.Id.Equals(Convert.ToInt32(args.DraggedNodeData.Id))).First();
            //     updatedKanbanCard.EstimatedEndDate = cellData.StartTime;
            //     var json = JsonConvert.SerializeObject(updatedKanbanCard);
            //     var content = new StringContent(json, UnicodeEncoding.UTF8, "application/json");
            //     var result = await httpClient.PutAsync("api/Kanban/UpdateEstimatedEndDate", content);
            //     if (result.IsSuccessStatusCode)
            //     {
            //         await ScheduleRef.AddEventAsync(eventData);
            //         TreeViewRef.RemoveNodes(new string[] { args.DraggedNodeData.Id });
            //     }
            // }
        }
    }

    private async Task ShowAlert(string message, string type)
    {
        if (type == "Alert")
        {
            MessageType = "e-toast-danger";
        }
        if (type == "Success")
        {
            MessageType = "e-toast-success";
        }
        MessageText = message;
        StateHasChanged();
        await Task.Delay(100);
        await this.ToastObj.ShowAsync();
    }

    public void OnPopupOpen(PopupOpenEventArgs<AppointmentData> args)
    {
        if (args.Type == PopupType.Editor || args.Type == PopupType.QuickInfo)
        {
            args.Cancel = true;
        }
    }

    public void OnEventRendered(EventRenderedArgs<AppointmentData> args)
    {
        //Here you can customize with your code
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        attributes.Add("style", "background: " + args.Data.CategoryColor);
        args.Attributes = attributes;
    }

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime CreateTime { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string CategoryColor { get; set; }
        public string Status { get; set; }
    }

}
