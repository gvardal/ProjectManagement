@page "/kanbanscheduler"
@using System.Text;
@inject HttpClient httpClient

<div class="row">
    <div class="col-lg-2">
        <h4>Not Scheduled Cards</h4>
        <SfTreeView @ref="TreeViewRef" TValue="KanbanCardDto" AllowDragAndDrop AllowTextWrap>
            <TreeViewFieldsSettings DataSource="@unscheduledCards" Id="Id" Text="Summary" IconCss="e-icons e-plus"></TreeViewFieldsSettings>
            <TreeViewEvents TValue="KanbanCardDto" OnNodeDragStop="DragStop"></TreeViewEvents>
        </SfTreeView>
    </div>
    <div class="col-lg-10 e-droppable">
        <SfSchedule @ref="ScheduleRef" TValue="AppointmentData" Height="calc(100vh - 4.75rem)" AllowDragAndDrop="false">
            <ScheduleEventSettings DataSource="@appointmentDatas" IgnoreWhitespace="false"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="View.Month" MaxEventsPerRow="4" ShowWeekend="false"></ScheduleView>
                <ScheduleView Option="View.MonthAgenda" ShowWeekend="false"></ScheduleView>
                <ScheduleView Option="View.Year"></ScheduleView>
            </ScheduleViews>
        </SfSchedule>
    </div>
</div>

<style>
    .e-treeview .e-text-content {
        padding: 0 !important;
        margin: 0 !important;
    }

    .e-treeview .e-list-text {
        padding: 0 !important;
    }

</style>

 @code {

    DateTime CurrentDate = new DateTime(2020, 1, 6);

    private List<KanbanCardDto> kanbanCards = new();
    private List<AppointmentData> appointmentDatas = new();
    List<KanbanCardDto> unscheduledCards = new();

    protected override async Task OnInitializedAsync()
    {
        kanbanCards.Clear();
        unscheduledCards.Clear();
        var result = await httpClient.GetAsync("api/Kanban");
        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(response))
            {
                var _kanbans = JsonConvert.DeserializeObject<List<KanbanCardDto>>(response)!;
                if (_kanbans.Count > 0)
                {
                    foreach (var kanban in _kanbans)
                    {
                        kanbanCards.Add(new KanbanCardDto
                            {
                                Id = kanban.Id,
                                Title = kanban.Title,
                                Summary = kanban.Summary,
                                EstimatedEndDate = kanban.EstimatedEndDate,
                                ProjectId = kanban.ProjectId,
                                ProjectTitle = kanban.ProjectTitle,
                                Assignee = kanban.Assignee,
                                CardTags = kanban.CardTags,
                                Color = kanban.Color,
                                Priority = kanban.Priority,
                                Status = kanban.Status
                            });
                    }
                }
            }
        }
        unscheduledCards = kanbanCards.Where(x => x.EstimatedEndDate.ToString("dd.MM.yyyy").Equals("01.01.0001")).ToList();
        foreach (var appointment in kanbanCards.Where(x => !x.EstimatedEndDate.ToString("dd.MM.yyyy").Equals("01.01.0001")).ToList())
        {
            appointmentDatas.Add(new AppointmentData
                {

                    Id = appointment.Id,
                    Subject = appointment.Summary!,
                    IsAllDay = true,
                    StartTime = appointment.EstimatedEndDate,
                    EndTime = appointment.EstimatedEndDate
                });
        }
    }

    SfSchedule<AppointmentData> ScheduleRef = new();
    SfTreeView<KanbanCardDto> TreeViewRef = new();

    async Task DragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        Syncfusion.Blazor.Schedule.CellClickEventArgs cellData = await ScheduleRef.GetTargetCellAsync((int)args.Left, (int)args.Top);
        if (cellData != null)
        {
            var resourceDetails = ScheduleRef.GetResourceByIndex(cellData.GroupIndex);
            AppointmentData eventData = new AppointmentData
                {
                    Id = Convert.ToInt32(args.DraggedNodeData.Id),
                    Subject = args.DraggedNodeData.Text,
                    IsAllDay = true,
                    StartTime = cellData.StartTime,
                    EndTime = cellData.EndTime,
                };
            

            // update kanban card EstimatedEndDate
            KanbanCardDto updatedKanbanCard = unscheduledCards.Where(x => x.Id.Equals(Convert.ToInt32(args.DraggedNodeData.Id))).First();
            updatedKanbanCard.EstimatedEndDate = cellData.StartTime;
            var json = JsonConvert.SerializeObject(updatedKanbanCard);
            var content = new StringContent(json, UnicodeEncoding.UTF8, "application/json"); 
            var result = await httpClient.PutAsync("api/Kanban/UpdateEstimatedEndDate", content);
            if(result.IsSuccessStatusCode)
            {
                await ScheduleRef.AddEventAsync(eventData);
                TreeViewRef.RemoveNodes(new string[] { args.DraggedNodeData.Id });
            }
        }
    }

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }

}
